/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pbeTransportFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         50000;

deltaT          1;

writeControl    runTime;

writeInterval   100;

purgeWrite      10;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   12;

runTimeModifiable true;

functions
{
    epsilonVolAverage
    {
        functionObjectLibs ("libutilityFunctionObjects.so");
        type coded;
        redirectType integral;
        outputControl timeStep;
        code
        #{
        const volScalarField& epsilon 
                = mesh().lookupObject<volScalarField>("epsilon");

        scalar volAverage = 0;
        scalar totalVolume = 0;

        forAll (epsilon, cellI)
        {
            totalVolume += mesh().V()[cellI];
        }

        forAll (epsilon, cellI)
        {
            volAverage += epsilon[cellI]*mesh().V()[cellI]/totalVolume;
        }

        Info<<"Volume averaged epsilon: " << volAverage << endl;

        #};
    }
    
//     d43Average
//     {
//         functionObjectLibs ("libutilityFunctionObjects.so");
//         type coded;
//         redirectType integral;
//         outputControl timeStep;
//         code
//         #{
//         const volScalarField& m3 
//                 = mesh().lookupObject<volScalarField>("moment.3");
//                 
//         const volScalarField& m4
//                 = mesh().lookupObject<volScalarField>("moment.4");
//                 
//         volScalarField d43(m4/m3);
// 
//         scalar volAverage = 0;
//         scalar totalVolume = 0;
// 
//         forAll (d43, cellI)
//         {
//             totalVolume += mesh().V()[cellI];
//         }
// 
//         forAll (d43, cellI)
//         {
//             volAverage += d43[cellI]*mesh().V()[cellI]/totalVolume;
//         }
// 
//         Info<<"Volume averaged normalized d43: " << volAverage/(2.0e-6) << endl;
// 
//         #};
//     }
}


// ************************************************************************* //
